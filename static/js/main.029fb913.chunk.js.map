{"version":3,"sources":["utils.ts","components/CurrencySelector/index.tsx","components/LatestCurrencies/index.tsx","components/CurrencyInput/index.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["callApi","endpoint","date","fetch","then","data","json","getExchangeRateFor","currency","exchangeRate","rate","filterOptions","createFilterOptions","ignoreCase","stringify","option","code","label","CurrencySelector","React","currencies","onSelect","value","Autocomplete","onChange","_","sx","width","options","autoHighlight","getOptionLabel","toUpperCase","isOptionEqualToValue","renderOption","props","Box","component","renderInput","params","TextField","inputProps","autoComplete","LatestCurrencies","memo","list","selected","onSelectCurrency","Stack","direction","spacing","map","isSelected","Chip","backgroundColor","theme","palette","primary","light","grey","border","dark","color","onClick","clickable","CurrencyInput","type","InputLabelProps","shrink","addCurrencyToList","newCurrency","currentList","find","c","concat","slice","MAX_LATEST_HISTORY_SIZE","updateExchange","input","updateInput","updateOutput","inputCurrency","outputCurrency","console","log","amount","output","toFixed","App","useState","setCurrencies","selectedCurrencyTop","setSelectedCurrencyTop","selectedCurrencyBottom","setSelectedCurrencyBottom","latestCurrenciesTop","setLatestCurrenciesTop","latestCurrenciesBottom","setLatestCurrenciesBottom","amountTop","setAmountTop","amountBottom","setAmountBottom","setExchangeRate","useEffect","Object","entries","latestTop","localStorage","getItem","latestBottom","JSON","parse","lastTop","lastBottom","onChangeAmountTop","useCallback","source","rest","target","onChangeAmountBottom","onSelectCurrencyTop","newCurrencyList","setItem","onSelectCurrencyBottom","length","Container","height","display","alignItems","Paper","padding","Grid","container","alignContent","position","paddingTop","item","top","disabled","justifyContent","fontSize","paddingBottom","bottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","createTheme","main","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.029fb913.chunk.js","sourcesContent":["import { Currency, ExchangeRate } from \"./types\"\n\nexport const callApi: <R = Record<string, string>>(endpoint: string, date?: string) => Promise<R> = (endpoint, date = 'latest') => (\n    fetch(`https://cdn.jsdelivr.net/gh/fawazahmed0/currency-api@1/${date}/${endpoint}`)\n        .then(data => data.json())\n)\n\nexport const getLatestCurrenciesList: () => Promise<Array<Currency>> = () => callApi('currencies.json').then((currencies) => (\n    Object.entries(currencies).map(([code, label]) => ({ code, label }))\n))\n\nexport const getExchangeRateFor = (currency: string): Promise<ExchangeRate> => (\n    callApi<{ date: string } & { [currency: string]: Record<string, number> }>(`currencies/${currency}.min.json`)\n        .then(exchangeRate => ({\n            date: exchangeRate.date,\n            currency,\n            rate: exchangeRate[currency],\n        }))\n)\n\nexport const toAmount = (value: string | null) => value == null ? '' : parseInt(value, 10)\n","import * as React from 'react'\n\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete'\nimport TextField from '@mui/material/TextField'\nimport Box from '@mui/material/Box'\n\nimport type { Currency } from '../../types'\n\ninterface CurrencySelectorProps {\n  currencies: Array<Currency>;\n  label: string;\n  onSelect: (currency: Currency) => void;\n  value: Currency | null;\n}\n\nconst filterOptions = createFilterOptions({\n  ignoreCase: true,\n  stringify: (option: Currency) => option.code + option.label,\n})\n\nconst CurrencySelector: React.FC<CurrencySelectorProps> = React.memo(({ currencies, label, onSelect, value }) => {\n  return (\n    <Autocomplete\n      onChange={(_, value) => value && onSelect(value)}\n      filterOptions={filterOptions}\n      sx={{ width: 300 }}\n      options={currencies}\n      value={value}\n      autoHighlight\n      getOptionLabel={({ code }) => code.toUpperCase()}\n      isOptionEqualToValue={(option, value) => option.code === value.code}\n      renderOption={(props, option) => (\n        <Box component=\"li\" {...props}>\n          ({option.code.toUpperCase()}) {option.label}\n        </Box>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label={label}\n          inputProps={{\n            ...params.inputProps,\n            autoComplete: 'new-password', // disable autocomplete and autofill\n          }}\n        />\n      )}\n    />\n  )\n});\n\nexport default CurrencySelector","import React from 'react'\n\nimport Chip from '@mui/material/Chip'\nimport Stack, { StackProps } from '@mui/material/Stack'\nimport { grey } from '@mui/material/colors';\n\nimport { Currency } from '../../types';\n\n\nexport interface LatestCurrenciesProps extends StackProps {\n    list: Array<Currency>;\n    selected: Currency | null;\n    onSelectCurrency: (currency: Currency) => void;\n}\n\n\nconst LatestCurrencies: React.FC<LatestCurrenciesProps> = React.memo(({ list, selected, onSelectCurrency, ...props }) => (\n    <Stack direction=\"row\" spacing={1} {...props}>\n        {list.map(currency => {\n            const isSelected = selected !== null && currency.code === selected.code\n            return (\n                <Chip \n                    sx={{\n                        backgroundColor: (theme) => isSelected ? theme.palette.primary.light : grey[100],\n                        border: theme => `1px solid ${isSelected ? theme.palette.primary.dark : grey[600]}`,\n                        '&:hover': {\n                            backgroundColor: (theme) => isSelected ? theme.palette.primary.light : grey[300]\n                        }\n                    }}\n                    color={isSelected ? 'primary' : 'default'}\n                    label={currency.code.toUpperCase()} \n                    onClick={() => onSelectCurrency(currency)}\n                    clickable\n                    key={currency.code} \n                />\n            )\n        })}\n    </Stack>\n))\n\nexport default LatestCurrencies","import React from 'react'\nimport TextField, { TextFieldProps } from '@mui/material/TextField'\n\nconst CurrencyInput: React.FC<TextFieldProps> = React.memo((props) => (\n    <TextField sx={{ width: 300 }} type=\"number\" InputLabelProps={{ shrink: true }} {...props} />\n))\n\nexport default CurrencyInput\n","import React from 'react';\n\nimport Container from '@mui/material/Container'\nimport Box from '@mui/material/Box'\nimport Paper from '@mui/material/Paper'\nimport Grid from '@mui/material/Grid'\nimport ImportExportIcon from '@mui/icons-material/ImportExport';\n\nimport { getExchangeRateFor, getLatestCurrenciesList } from './utils';\nimport CurrencySelector from './components/CurrencySelector';\nimport LatestCurrencies from './components/LatestCurrencies'\nimport CurrencyInput from './components/CurrencyInput';\nimport type { Currency, ExchangeRate } from './types'\n\nconst MAX_LATEST_HISTORY_SIZE = 5\n\nconst addCurrencyToList = (newCurrency: Currency, currentList: Array<Currency>) => {\n  if (!currentList.find((c) => c.code === newCurrency.code)) {\n    return [newCurrency].concat(currentList.slice(0, MAX_LATEST_HISTORY_SIZE - 1))\n  }\n  return currentList\n}\n\ntype CurrencyInputVal = string | number\n\ntype ExchangeProps = {\n  input: CurrencyInputVal;\n  updateInput: React.Dispatch<React.SetStateAction<CurrencyInputVal>>;\n  updateOutput: React.Dispatch<React.SetStateAction<CurrencyInputVal>>;\n  inputCurrency: Currency | null;\n  outputCurrency: Currency | null;\n  exchangeRate: ExchangeRate | undefined;\n}\nconst updateExchange = ({\n  input,\n  updateInput,\n  updateOutput,\n  inputCurrency,\n  outputCurrency,\n  exchangeRate,\n}: ExchangeProps) => {\n  updateInput(() => input)\n  console.log(inputCurrency, outputCurrency, exchangeRate)\n\n  if (inputCurrency != null && outputCurrency != null && exchangeRate != null) {\n    const amount = +input\n    const output = exchangeRate.currency === inputCurrency.code \n      ? amount * exchangeRate.rate[outputCurrency.code]\n      : amount / exchangeRate.rate[inputCurrency.code]\n\n    updateOutput(() => output.toFixed(2))\n  }\n}\n\nfunction App() {\n  const [currencies, setCurrencies] = React.useState<Array<Currency>>([])\n\n  const [selectedCurrencyTop, setSelectedCurrencyTop] = React.useState<Currency | null>(null)\n  const [selectedCurrencyBottom, setSelectedCurrencyBottom] = React.useState<Currency | null>(null)\n\n  const [latestCurrenciesTop, setLatestCurrenciesTop] = React.useState<Array<Currency>>([])\n  const [latestCurrenciesBottom, setLatestCurrenciesBottom] = React.useState<Array<Currency>>([])\n\n  const [amountTop, setAmountTop] = React.useState<CurrencyInputVal>('')\n  const [amountBottom, setAmountBottom] = React.useState<CurrencyInputVal>('')\n\n  const [exchangeRate, setExchangeRate] = React.useState<ExchangeRate>();\n\n  React.useEffect(() => {\n    getLatestCurrenciesList().then(setCurrencies).catch(console.log)\n\n    const latestTop = localStorage.getItem('latest-currencies-top')\n    const latestBottom = localStorage.getItem('latest-currencies-bottom')\n    if (latestTop != null) {\n      setLatestCurrenciesTop(JSON.parse(latestTop))\n    }\n    if (latestBottom != null) {\n      setLatestCurrenciesBottom(JSON.parse(latestBottom))\n    }\n\n    const lastTop = localStorage.getItem('last-currency-top')\n    const lastBottom = localStorage.getItem('last-currency-bottom')\n    if (lastTop != null) {\n      const currency = JSON.parse(lastTop)\n      getExchangeRateFor(currency.code).then(setExchangeRate)\n      setSelectedCurrencyTop(JSON.parse(lastTop))\n    }\n    if (lastBottom != null) {\n      setSelectedCurrencyBottom(JSON.parse(lastBottom))\n    }\n  }, [])\n\n\n  const onChangeAmountTop = React.useCallback((source, rest: Partial<ExchangeProps> = {}) => updateExchange({\n    input: typeof source === 'object' ? source.target.value : source,\n    inputCurrency: selectedCurrencyTop,\n    outputCurrency: selectedCurrencyBottom,\n    updateInput: setAmountTop,\n    updateOutput: setAmountBottom,\n    exchangeRate,\n    ...rest\n  }), [selectedCurrencyTop, selectedCurrencyBottom, exchangeRate])\n  const onChangeAmountBottom = React.useCallback((source, rest: Partial<ExchangeProps> = {}) => updateExchange({\n    input: typeof source === 'object' ? source.target.value : source,\n    inputCurrency: selectedCurrencyBottom,\n    outputCurrency: selectedCurrencyTop,\n    updateInput: setAmountBottom,\n    updateOutput: setAmountTop,\n    exchangeRate,\n    ...rest\n  }), [selectedCurrencyTop, selectedCurrencyBottom, exchangeRate])\n\n  const onSelectCurrencyTop = React.useCallback((currency: Currency) => {\n    if (selectedCurrencyTop?.code === currency.code) return\n\n    setSelectedCurrencyTop(currency)\n    setLatestCurrenciesTop((list) => {\n      const newCurrencyList = addCurrencyToList(currency, list)\n      localStorage.setItem('latest-currencies-top', JSON.stringify(newCurrencyList))\n      return newCurrencyList\n    })\n    localStorage.setItem('last-currency-top', JSON.stringify(currency))\n\n    getExchangeRateFor(currency.code).then(\n      (rate) => {\n        setExchangeRate(rate)\n        onChangeAmountTop(amountTop, { inputCurrency: currency, exchangeRate: rate })\n      }\n    )\n  }, [amountTop, selectedCurrencyTop, onChangeAmountTop])\n  const onSelectCurrencyBottom = React.useCallback((currency: Currency) => {\n    if (selectedCurrencyBottom?.code === currency.code) return\n\n    setSelectedCurrencyBottom(currency)\n    setLatestCurrenciesBottom((list) => {\n      const newCurrencyList = addCurrencyToList(currency, list)\n      if (newCurrencyList.length !== list.length) {\n        localStorage.setItem('latest-currencies-bottom', JSON.stringify(newCurrencyList))\n      }\n      return newCurrencyList\n    })\n    localStorage.setItem('last-currency-bottom', JSON.stringify(currency))\n\n    onChangeAmountTop(amountTop, { outputCurrency: currency })\n  }, [amountTop, onChangeAmountTop, selectedCurrencyBottom])\n\n\n  return (\n    <Container sx={{ height: '100vh' }}>\n      <Box sx={{ height: '100%', display: 'flex', alignItems: 'center' }}>\n        <Paper sx={{ width: '100%', padding: 2 }}>\n          <Grid container direction=\"column\" spacing={2} alignContent=\"center\" sx={{ position: 'relative', paddingTop: '40px' }}>\n            <Grid item>\n              <LatestCurrencies sx={{ position: 'absolute', top: 10 }} selected={selectedCurrencyTop} list={latestCurrenciesTop} onSelectCurrency={onSelectCurrencyTop} />\n              <CurrencySelector value={selectedCurrencyTop} onSelect={onSelectCurrencyTop} label=\"Select currency\" currencies={currencies} />\n            </Grid>\n            <Grid item>\n              <CurrencyInput value={amountTop} onChange={onChangeAmountTop} label=\"Amount\" disabled={selectedCurrencyTop == null} />\n            </Grid>\n          </Grid>\n\n          <Box sx={{ padding: 2, display: 'flex', justifyContent: 'center' }}>\n            <ImportExportIcon color=\"action\" fontSize=\"large\" />\n          </Box>\n\n          <Grid container direction=\"column\" spacing={2} alignContent=\"center\" sx={{ position: 'relative', paddingBottom: '40px' }}>\n            <Grid item>\n              <CurrencyInput value={amountBottom} onChange={onChangeAmountBottom} label=\"Amount\" disabled={selectedCurrencyBottom == null} />\n            </Grid>\n            <Grid item>\n              <CurrencySelector value={selectedCurrencyBottom} onSelect={onSelectCurrencyBottom} label=\"Select currency\" currencies={currencies} />\n              <LatestCurrencies sx={{ position: 'absolute', bottom: 0 }} selected={selectedCurrencyBottom} list={latestCurrenciesBottom} onSelectCurrency={onSelectCurrencyBottom} />\n            </Grid>\n          </Grid>\n        </Paper>\n      </Box>\n    </Container>\n  );\n}\n\nexport default React.memo(App)\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#63d3d3'\n    }\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}