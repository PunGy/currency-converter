{"version":3,"sources":["utils.ts","components/CurrencySelector/index.tsx","components/LatestCurrencies/index.tsx","components/CurrencyInput/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["callApi","endpoint","date","fetch","then","data","json","getExchangeRateFor","currency","exchangeRate","rate","filterOptions","createFilterOptions","ignoreCase","stringify","option","code","label","CurrencySelector","currencies","onSelect","value","Autocomplete","onChange","_","sx","width","options","autoHighlight","getOptionLabel","toUpperCase","renderOption","props","Box","component","mr","flexShrink","renderInput","params","TextField","inputProps","autoComplete","LatestCurrencies","list","selected","onSelectCurrency","Stack","direction","spacing","map","isSelected","Chip","backgroundColor","theme","alpha","palette","primary","light","grey","border","dark","color","onClick","clickable","CurrencyInput","type","InputLabelProps","shrink","addCurrencyToList","newCurrency","currentList","find","c","concat","slice","MAX_LATEST_HISTORY_SIZE","updateExchange","input","updateInput","updateOutput","inputCurrency","outputCurrency","amount","output","toFixed","App","setCurrencies","React","useState","selectedCurrencyTop","setSelectedCurrencyTop","selectedCurrencyBottom","setSelectedCurrencyBottom","latestCurrenciesTop","setLatestCurrenciesTop","latestCurrenciesBottom","setLatestCurrenciesBottom","amountTop","setAmountTop","amountBottom","setAmountBottom","setExchangeRate","useEffect","Object","entries","catch","console","log","latestTop","localStorage","getItem","latestBottom","JSON","parse","onChangeAmountTop","useCallback","source","rest","target","onChangeAmountBottom","onSelectCurrencyTop","onSelectCurrencyBottom","Container","height","display","alignItems","Paper","padding","Grid","container","alignContent","position","paddingTop","item","top","disabled","justifyContent","fontSize","paddingBottom","bottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","main","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"wQAEaA,EAAuF,SAACC,GAAD,IAAWC,EAAX,uDAAkB,SAAlB,OAChGC,MAAM,0DAAD,OAA2DD,EAA3D,YAAmED,IACnEG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WAOdC,EAAqB,SAACC,GAAD,OAC9BR,EAAO,qBAAkFQ,EAAlF,UACFJ,MAAK,SAAAK,GAAY,MAAK,CACnBP,KAAMO,EAAaP,KACnBM,WACAE,KAAMD,EAAaD,Q,0CCDzBG,EAAgBC,YAAoB,CACxCC,YAAY,EACZC,UAAW,SAACC,GAAD,OAAsBA,EAAOC,KAAOD,EAAOE,SAuCzCC,EApC2C,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,WAAYF,EAA6B,EAA7BA,MAAOG,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACxF,OACE,cAACC,EAAA,EAAD,CACEC,SAAU,SAACC,EAAGH,GAAJ,OAAcA,GAASD,EAASC,IAC1CV,cAAeA,EACfc,GAAI,CAAEC,MAAO,KACbC,QAASR,EACTE,MAAOA,EACPO,eAAa,EACbC,eAAgB,qBAAGb,KAAgBc,eACnCC,aAAc,SAACC,EAAOjB,GAAR,OACZ,eAACkB,EAAA,EAAD,yBAAKC,UAAU,KAAKT,GAAI,CAAE,UAAW,CAAEU,GAAI,EAAGC,WAAY,KAAWJ,GAArE,kBAQIjB,EAAOC,KAAKc,cARhB,KAQiCf,EAAOE,WAG1CoB,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BACMD,GADN,IAEErB,MAAOA,EACPuB,WAAU,2BACLF,EAAOE,YADF,IAERC,aAAc,wB,kCCPXC,MAxB2C,EAAGC,OAAMC,WAAUC,sBAAqBb,KAC9F,cAACc,EAAA,EAAD,CAAOC,UAAU,MAAMC,QAAS,KAAOhB,EAAvC,SACKW,EAAKM,KAAIzC,IACN,MAAM0C,EAA0B,OAAbN,GAAqBpC,EAASQ,OAAS4B,EAAS5B,KACnE,OACI,cAACmC,EAAA,EAAD,CACI1B,GAAI,CACA2B,gBAAkBC,GAAUH,EAAaI,gBAAMD,EAAME,QAAQC,QAAQC,MAAO,IAAOC,IAAK,KACxFC,OAAQN,GAAK,oBAAiBH,EAAaG,EAAME,QAAQC,QAAQI,KAAOF,IAAK,MAC7E,UAAW,CACPN,gBAAkBC,GAAUH,EAAaI,gBAAMD,EAAME,QAAQC,QAAQC,MAAO,IAAOC,IAAK,OAGhGG,MAAOX,EAAa,UAAY,UAChCjC,MAAOT,EAASQ,KAAKc,cACrBgC,QAAS,IAAMjB,EAAiBrC,GAChCuD,WAAS,GACJvD,EAASQ,WC3BnBgD,MAJkChC,GAC7C,cAACO,EAAA,EAAD,CAAWd,GAAI,CAAEC,MAAO,KAAOuC,KAAK,SAASC,gBAAiB,CAAEC,QAAQ,MAAYnC,ICUxF,MAEMoC,EAAqBC,GAA2BC,GAC/CA,EAAYC,MAAMC,GAAMA,EAAExD,OAASqD,EAAYrD,OAG7CsD,EAFE,CAACD,GAAaI,OAAOH,EAAYI,MAAM,EAAGC,IAe/CC,EAAiB,EACrBC,QACAC,cACAC,eACAC,gBACAC,iBACAxE,mBAIA,GAFAqE,GAAY,IAAMD,IAEG,MAAjBG,GAA2C,MAAlBC,GAA0C,MAAhBxE,EAAsB,CAC3E,MAAMyE,GAAUL,EACVM,EAAS1E,EAAaD,WAAawE,EAAchE,KACnDkE,EAASzE,EAAaC,KAAKuE,EAAejE,MAC1CkE,EAASzE,EAAaC,KAAKsE,EAAchE,MAC7C+D,GAAa,IAAMI,EAAOC,QAAQ,OA4GvBC,MAxGf,WACE,MAAOlE,EAAYmE,GAAiBC,IAAMC,SAA0B,KAE7DC,EAAqBC,GAA0BH,IAAMC,SAA0B,OAC/EG,EAAwBC,GAA6BL,IAAMC,SAA0B,OAErFK,EAAqBC,GAA0BP,IAAMC,SAA0B,KAC/EO,EAAwBC,GAA6BT,IAAMC,SAA0B,KAErFS,EAAWC,GAAgBX,IAAMC,SAA2B,KAC5DW,EAAcC,GAAmBb,IAAMC,SAA2B,KAElE/E,EAAc4F,GAAmBd,IAAMC,WAE9CD,IAAMe,WAAU,KJ3D2DtG,EAAQ,mBAAmBI,MAAK,SAACe,GAAD,OACzGoF,OAAOC,QAAQrF,GAAY8B,KAAI,yCAAoB,CAAEjC,KAAtB,KAA4BC,MAA5B,YI2DLb,KAAKkF,GAAemB,MAAMC,QAAQC,KAE5D,MAAMC,EAAYC,aAAaC,QAAQ,yBACjCC,EAAeF,aAAaC,QAAQ,4BACzB,MAAbF,GACFd,EAAuBkB,KAAKC,MAAML,IAEhB,MAAhBG,GACFf,EAA0BgB,KAAKC,MAAMF,MAEtC,IAGH,MAAMG,EAAoB3B,IAAM4B,aAAY,CAACC,EAAQC,EAA+B,KAAOzC,EAAe,CACxGC,MAAyB,kBAAXuC,EAAsBA,EAAOE,OAAOjG,MAAQ+F,EAC1DpC,cAAeS,EACfR,eAAgBU,EAChBb,YAAaoB,EACbnB,aAAcqB,EACd3F,kBACG4G,KACD,CAAC5B,EAAqBE,EAAwBlF,IAC5C8G,EAAuBhC,IAAM4B,aAAY,CAACC,EAAQC,EAA+B,KAAOzC,EAAe,CAC3GC,MAAyB,kBAAXuC,EAAsBA,EAAOE,OAAOjG,MAAQ+F,EAC1DpC,cAAeW,EACfV,eAAgBQ,EAChBX,YAAasB,EACbrB,aAAcmB,EACdzF,kBACG4G,KACD,CAAC5B,EAAqBE,EAAwBlF,IAE5C+G,EAAsBjC,IAAM4B,aAAa3G,IAC7CkF,EAAuBlF,GACvBsF,EAAuB1B,EAAkB5D,IAEzCD,EAAmBC,EAASQ,MAAMZ,MAC/BM,IACC2F,EAAgB3F,GAChBwG,EAAkBjB,EAAW,CAAExF,aAAcC,SAGhD,CAACuF,IACEwB,EAAyBlC,IAAM4B,aAAa3G,IAChDoF,EAA0BpF,GAC1BwF,EAA0B5B,EAAkB5D,IAE5CD,EAAmBC,EAASQ,MAAMZ,MAC/BM,IACC2F,EAAgB3F,GAChBwG,EAAkBf,EAAc,CAAE1F,aAAcC,SAGnD,CAACyF,IAGJ,OACE,cAACuB,EAAA,EAAD,CAAWjG,GAAI,CAAEkG,OAAQ,SAAzB,SACE,cAAC1F,EAAA,EAAD,CAAKR,GAAI,CAAEkG,OAAQ,OAAQC,QAAS,OAAQC,WAAY,UAAxD,SACE,eAACC,EAAA,EAAD,CAAOrG,GAAI,CAAEC,MAAO,OAAQqG,QAAS,GAArC,UACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAClF,UAAU,SAASC,QAAS,EAAGkF,aAAa,SAASzG,GAAI,CAAE0G,SAAU,WAAYC,WAAY,QAA7G,UACE,eAACJ,EAAA,EAAD,CAAMK,MAAI,EAAV,UACE,cAAC,EAAD,CAAkB5G,GAAI,CAAE0G,SAAU,WAAYG,IAAK,IAAM1F,SAAU6C,EAAqB9C,KAAMkD,EAAqBhD,iBAAkB2E,IACrI,cAAC,EAAD,CAAkBnG,MAAOoE,EAAqBrE,SAAUoG,EAAqBvG,MAAM,kBAAkBE,WAAYA,OAEnH,cAAC6G,EAAA,EAAD,CAAMK,MAAI,EAAV,SACE,cAAC,EAAD,CAAehH,MAAO4E,EAAW1E,SAAU2F,EAAmBjG,MAAM,SAASsH,SAAiC,MAAvB9C,SAI3F,cAACxD,EAAA,EAAD,CAAKR,GAAI,CAAEsG,QAAS,EAAGH,QAAS,OAAQY,eAAgB,UAAxD,SACE,cAAC,IAAD,CAAkB3E,MAAM,SAAS4E,SAAS,YAG5C,eAACT,EAAA,EAAD,CAAMC,WAAS,EAAClF,UAAU,SAASC,QAAS,EAAGkF,aAAa,SAASzG,GAAI,CAAE0G,SAAU,WAAYO,cAAe,QAAhH,UACE,cAACV,EAAA,EAAD,CAAMK,MAAI,EAAV,SACE,cAAC,EAAD,CAAehH,MAAO8E,EAAc5E,SAAUgG,EAAsBtG,MAAM,SAASsH,SAAoC,MAA1B5C,MAE/F,eAACqC,EAAA,EAAD,CAAMK,MAAI,EAAV,UACE,cAAC,EAAD,CAAkBhH,MAAOsE,EAAwBvE,SAAUqG,EAAwBxG,MAAM,kBAAkBE,WAAYA,IACvH,cAAC,EAAD,CAAkBM,GAAI,CAAE0G,SAAU,WAAYQ,OAAQ,GAAK/F,SAAU+C,EAAwBhD,KAAMoD,EAAwBlD,iBAAkB4E,kBCrI5ImB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB1I,MAAK,YAAkD,IAA/C2I,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,iBCFRxF,EAAQ+F,YAAY,CACxB7F,QAAS,CACPC,QAAS,CACP6F,KAAM,cAKZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAepG,MAAOA,EAAtB,SACE,cAAC,EAAD,QAGJqG,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.18f26178.chunk.js","sourcesContent":["import { Currency, ExchangeRate } from \"./types\"\n\nexport const callApi: <R = Record<string, string>>(endpoint: string, date?: string) => Promise<R> = (endpoint, date = 'latest') => (\n    fetch(`https://cdn.jsdelivr.net/gh/fawazahmed0/currency-api@1/${date}/${endpoint}`)\n        .then(data => data.json())\n)\n\nexport const getLatestCurrenciesList: () => Promise<Array<Currency>> = () => callApi('currencies.json').then((currencies) => (\n    Object.entries(currencies).map(([code, label]) => ({ code, label }))\n))\n\nexport const getExchangeRateFor = (currency: string): Promise<ExchangeRate> => (\n    callApi<{ date: string } & { [currency: string]: Record<string, number> }>(`currencies/${currency}.json`)\n        .then(exchangeRate => ({\n            date: exchangeRate.date,\n            currency,\n            rate: exchangeRate[currency],\n        }))\n)\n\nexport const toAmount = (value: string | null) => value == null ? '' : parseInt(value, 10)\n","import * as React from 'react'\n\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete'\nimport TextField from '@mui/material/TextField'\nimport Box from '@mui/material/Box'\n\nimport type { Currency } from '../../types'\n\ninterface CurrencySelectorProps {\n  currencies: Array<Currency>;\n  label: string;\n  onSelect: (currency: Currency) => void;\n  value: Currency | null;\n}\n\nconst filterOptions = createFilterOptions({\n  ignoreCase: true,\n  stringify: (option: Currency) => option.code + option.label,\n})\n\nconst CurrencySelector: React.FC<CurrencySelectorProps> = ({ currencies, label, onSelect, value }) => {\n  return (\n    <Autocomplete\n      onChange={(_, value) => value && onSelect(value)}\n      filterOptions={filterOptions}\n      sx={{ width: 300 }}\n      options={currencies}\n      value={value}\n      autoHighlight\n      getOptionLabel={({ code }) => code.toUpperCase()}\n      renderOption={(props, option) => (\n        <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n          {/* <img\n            loading=\"lazy\"\n            width=\"20\"\n            src={`https://flagcdn.com/w20/${option.countryCode}.png`}\n            srcSet={`https://flagcdn.com/w40/${option.countryCode}.png 2x`}\n            alt=\"\"\n          /> */}\n          ({option.code.toUpperCase()}) {option.label}\n        </Box>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label={label}\n          inputProps={{\n            ...params.inputProps,\n            autoComplete: 'new-password', // disable autocomplete and autofill\n          }}\n        />\n      )}\n    />\n  )\n};\n\nexport default CurrencySelector","import React from 'react'\n\nimport Chip from '@mui/material/Chip'\nimport Stack, { StackProps } from '@mui/material/Stack'\nimport { grey } from '@mui/material/colors';\nimport { alpha } from '@mui/system/colorManipulator'\n\nimport { Currency } from '../../types';\n\n\nexport interface LatestCurrenciesProps extends StackProps {\n    list: Array<Currency>;\n    selected: Currency | null;\n    onSelectCurrency: (currency: Currency) => void;\n}\n\n\nconst LatestCurrencies: React.FC<LatestCurrenciesProps> = ({ list, selected, onSelectCurrency, ...props }) => (\n    <Stack direction=\"row\" spacing={1} {...props}>\n        {list.map(currency => {\n            const isSelected = selected !== null && currency.code === selected.code\n            return (\n                <Chip \n                    sx={{\n                        backgroundColor: (theme) => isSelected ? alpha(theme.palette.primary.light, 0.4) : grey[100],\n                        border: theme => `1px solid ${isSelected ? theme.palette.primary.dark : grey[600]}`,\n                        '&:hover': {\n                            backgroundColor: (theme) => isSelected ? alpha(theme.palette.primary.light, 0.6) : grey[300]\n                        }\n                    }}\n                    color={isSelected ? 'primary' : 'default'}\n                    label={currency.code.toUpperCase()} \n                    onClick={() => onSelectCurrency(currency)}\n                    clickable \n                    key={currency.code} \n                />\n            )\n        })}\n    </Stack>\n)\n\nexport default LatestCurrencies","import React from 'react'\nimport TextField, { TextFieldProps } from '@mui/material/TextField'\n\nconst CurrencyInput: React.FC<TextFieldProps> = (props) => (\n    <TextField sx={{ width: 300 }} type=\"number\" InputLabelProps={{ shrink: true }} {...props} />\n)\n\nexport default CurrencyInput\n","import React from 'react';\n\nimport Container from '@mui/material/Container'\nimport Box from '@mui/material/Box'\nimport Paper from '@mui/material/Paper'\nimport Grid from '@mui/material/Grid'\nimport ImportExportIcon from '@mui/icons-material/ImportExport';\n\nimport { getExchangeRateFor, getLatestCurrenciesList } from './utils';\nimport CurrencySelector from './components/CurrencySelector';\nimport LatestCurrencies from './components/LatestCurrencies'\nimport CurrencyInput from './components/CurrencyInput';\nimport type { Currency, ExchangeRate } from './types'\n\nconst MAX_LATEST_HISTORY_SIZE = 5\n\nconst addCurrencyToList = (newCurrency: Currency) => (currentList: Array<Currency>) => {\n  if (!currentList.find((c) => c.code === newCurrency.code)) {\n    return [newCurrency].concat(currentList.slice(0, MAX_LATEST_HISTORY_SIZE - 1))\n  }\n  return currentList\n}\n\ntype CurrencyInputVal = string | number\n\ntype ExchangeProps = {\n  input: CurrencyInputVal;\n  updateInput: React.Dispatch<React.SetStateAction<CurrencyInputVal>>;\n  updateOutput: React.Dispatch<React.SetStateAction<CurrencyInputVal>>;\n  inputCurrency: Currency | null;\n  outputCurrency: Currency | null;\n  exchangeRate: ExchangeRate | undefined;\n}\nconst updateExchange = ({\n  input,\n  updateInput,\n  updateOutput,\n  inputCurrency,\n  outputCurrency,\n  exchangeRate,\n}: ExchangeProps) => {\n  updateInput(() => input)\n\n  if (inputCurrency != null && outputCurrency != null && exchangeRate != null) {\n    const amount = +input\n    const output = exchangeRate.currency === inputCurrency.code \n      ? amount * exchangeRate.rate[outputCurrency.code]\n      : amount / exchangeRate.rate[inputCurrency.code]\n    updateOutput(() => output.toFixed(2))\n  }\n}\n\nfunction App() {\n  const [currencies, setCurrencies] = React.useState<Array<Currency>>([])\n\n  const [selectedCurrencyTop, setSelectedCurrencyTop] = React.useState<Currency | null>(null)\n  const [selectedCurrencyBottom, setSelectedCurrencyBottom] = React.useState<Currency | null>(null)\n\n  const [latestCurrenciesTop, setLatestCurrenciesTop] = React.useState<Array<Currency>>([])\n  const [latestCurrenciesBottom, setLatestCurrenciesBottom] = React.useState<Array<Currency>>([])\n\n  const [amountTop, setAmountTop] = React.useState<CurrencyInputVal>('')\n  const [amountBottom, setAmountBottom] = React.useState<CurrencyInputVal>('')\n\n  const [exchangeRate, setExchangeRate] = React.useState<ExchangeRate>();\n\n  React.useEffect(() => {\n    getLatestCurrenciesList().then(setCurrencies).catch(console.log)\n\n    const latestTop = localStorage.getItem('latest-currencies-top')\n    const latestBottom = localStorage.getItem('latest-currencies-bottom')\n    if (latestTop != null) {\n      setLatestCurrenciesTop(JSON.parse(latestTop))\n    }\n    if (latestBottom != null) {\n      setLatestCurrenciesBottom(JSON.parse(latestBottom))\n    }\n  }, [])\n\n\n  const onChangeAmountTop = React.useCallback((source, rest: Partial<ExchangeProps> = {}) => updateExchange({\n    input: typeof source === 'object' ? source.target.value : source,\n    inputCurrency: selectedCurrencyTop,\n    outputCurrency: selectedCurrencyBottom,\n    updateInput: setAmountTop,\n    updateOutput: setAmountBottom,\n    exchangeRate,\n    ...rest\n  }), [selectedCurrencyTop, selectedCurrencyBottom, exchangeRate])\n  const onChangeAmountBottom = React.useCallback((source, rest: Partial<ExchangeProps> = {}) => updateExchange({\n    input: typeof source === 'object' ? source.target.value : source,\n    inputCurrency: selectedCurrencyBottom,\n    outputCurrency: selectedCurrencyTop,\n    updateInput: setAmountBottom,\n    updateOutput: setAmountTop,\n    exchangeRate,\n    ...rest\n  }), [selectedCurrencyTop, selectedCurrencyBottom, exchangeRate])\n\n  const onSelectCurrencyTop = React.useCallback((currency: Currency) => {\n    setSelectedCurrencyTop(currency)\n    setLatestCurrenciesTop(addCurrencyToList(currency))\n\n    getExchangeRateFor(currency.code).then(\n      (rate) => {\n        setExchangeRate(rate)\n        onChangeAmountTop(amountTop, { exchangeRate: rate })\n      }\n    )\n  }, [amountTop])\n  const onSelectCurrencyBottom = React.useCallback((currency: Currency) => {\n    setSelectedCurrencyBottom(currency)\n    setLatestCurrenciesBottom(addCurrencyToList(currency))\n\n    getExchangeRateFor(currency.code).then(\n      (rate) => {\n        setExchangeRate(rate)\n        onChangeAmountTop(amountBottom, { exchangeRate: rate })\n      }\n    )\n  }, [amountBottom])\n\n\n  return (\n    <Container sx={{ height: '100vh' }}>\n      <Box sx={{ height: '100%', display: 'flex', alignItems: 'center' }}>\n        <Paper sx={{ width: '100%', padding: 2 }}>\n          <Grid container direction=\"column\" spacing={2} alignContent=\"center\" sx={{ position: 'relative', paddingTop: '40px' }}>\n            <Grid item>\n              <LatestCurrencies sx={{ position: 'absolute', top: 10 }} selected={selectedCurrencyTop} list={latestCurrenciesTop} onSelectCurrency={onSelectCurrencyTop} />\n              <CurrencySelector value={selectedCurrencyTop} onSelect={onSelectCurrencyTop} label=\"Select currency\" currencies={currencies} />\n            </Grid>\n            <Grid item>\n              <CurrencyInput value={amountTop} onChange={onChangeAmountTop} label=\"Amount\" disabled={selectedCurrencyTop == null} />\n            </Grid>\n          </Grid>\n\n          <Box sx={{ padding: 2, display: 'flex', justifyContent: 'center' }}>\n            <ImportExportIcon color=\"action\" fontSize=\"large\" />\n          </Box>\n\n          <Grid container direction=\"column\" spacing={2} alignContent=\"center\" sx={{ position: 'relative', paddingBottom: '40px' }}>\n            <Grid item>\n              <CurrencyInput value={amountBottom} onChange={onChangeAmountBottom} label=\"Amount\" disabled={selectedCurrencyBottom == null} />\n            </Grid>\n            <Grid item>\n              <CurrencySelector value={selectedCurrencyBottom} onSelect={onSelectCurrencyBottom} label=\"Select currency\" currencies={currencies} />\n              <LatestCurrencies sx={{ position: 'absolute', bottom: 0 }} selected={selectedCurrencyBottom} list={latestCurrenciesBottom} onSelectCurrency={onSelectCurrencyBottom} />\n            </Grid>\n          </Grid>\n        </Paper>\n      </Box>\n    </Container>\n  );\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#63d3d3'\n    }\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}