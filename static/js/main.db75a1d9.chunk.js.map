{"version":3,"sources":["utils.ts","components/CurrencySelector/index.tsx","components/LatestCurrencies/index.tsx","components/CurrencyInput/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["callApi","endpoint","date","fetch","then","data","json","filterOptions","createFilterOptions","ignoreCase","stringify","option","code","label","CurrencySelector","currencies","onSelect","value","Autocomplete","onChange","_","sx","width","options","autoHighlight","getOptionLabel","toUpperCase","isOptionEqualToValue","renderOption","props","Box","component","mr","flexShrink","renderInput","params","TextField","inputProps","autoComplete","LatestCurrencies","list","selected","onSelectCurrency","Stack","direction","spacing","map","currency","isSelected","Chip","backgroundColor","theme","palette","primary","light","grey","border","dark","color","onClick","clickable","CurrencyInput","type","InputLabelProps","shrink","addCurrencyToList","newCurrency","currentList","find","c","concat","slice","MAX_LATEST_HISTORY_SIZE","updateExchange","input","updateInput","updateOutput","inputCurrency","outputCurrency","exchangeRate","amount","output","rate","toFixed","App","React","useState","setCurrencies","selectedCurrencyTop","setSelectedCurrencyTop","selectedCurrencyBottom","setSelectedCurrencyBottom","latestCurrenciesTop","setLatestCurrenciesTop","latestCurrenciesBottom","setLatestCurrenciesBottom","amountTop","setAmountTop","amountBottom","setAmountBottom","setExchangeRate","useEffect","Object","entries","console","log","latestTop","localStorage","getItem","latestBottom","JSON","parse","onChangeAmountTop","useCallback","source","rest","target","onChangeAmountBottom","onSelectCurrencyTop","newCurrencyList","setItem","getExchangeRateFor","onSelectCurrencyBottom","Container","height","display","alignItems","Paper","padding","Grid","container","alignContent","position","paddingTop","item","top","disabled","justifyContent","fontSize","paddingBottom","bottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","main","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.db75a1d9.chunk.js","sourcesContent":["import { Currency, ExchangeRate } from \"./types\"\n\nexport const callApi: <R = Record<string, string>>(endpoint: string, date?: string) => Promise<R> = (endpoint, date = 'latest') => (\n    fetch(`https://cdn.jsdelivr.net/gh/fawazahmed0/currency-api@1/${date}/${endpoint}`)\n        .then(data => data.json())\n)\n\nexport const getLatestCurrenciesList: () => Promise<Array<Currency>> = () => callApi('currencies.json').then((currencies) => (\n    Object.entries(currencies).map(([code, label]) => ({ code, label }))\n))\n\nexport const getExchangeRateFor = (currency: string): Promise<ExchangeRate> => (\n    callApi<{ date: string } & { [currency: string]: Record<string, number> }>(`currencies/${currency}.json`)\n        .then(exchangeRate => ({\n            date: exchangeRate.date,\n            currency,\n            rate: exchangeRate[currency],\n        }))\n)\n\nexport const toAmount = (value: string | null) => value == null ? '' : parseInt(value, 10)\n","import * as React from 'react'\n\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete'\nimport TextField from '@mui/material/TextField'\nimport Box from '@mui/material/Box'\n\nimport type { Currency } from '../../types'\n\ninterface CurrencySelectorProps {\n  currencies: Array<Currency>;\n  label: string;\n  onSelect: (currency: Currency) => void;\n  value: Currency | null;\n}\n\nconst filterOptions = createFilterOptions({\n  ignoreCase: true,\n  stringify: (option: Currency) => option.code + option.label,\n})\n\nconst CurrencySelector: React.FC<CurrencySelectorProps> = ({ currencies, label, onSelect, value }) => {\n  return (\n    <Autocomplete\n      onChange={(_, value) => value && onSelect(value)}\n      filterOptions={filterOptions}\n      sx={{ width: 300 }}\n      options={currencies}\n      value={value}\n      autoHighlight\n      getOptionLabel={({ code }) => code.toUpperCase()}\n      isOptionEqualToValue={(option, value) => option.code === value.code}\n      renderOption={(props, option) => (\n        <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n          {/* <img\n            loading=\"lazy\"\n            width=\"20\"\n            src={`https://flagcdn.com/w20/${option.countryCode}.png`}\n            srcSet={`https://flagcdn.com/w40/${option.countryCode}.png 2x`}\n            alt=\"\"\n          /> */}\n          ({option.code.toUpperCase()}) {option.label}\n        </Box>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label={label}\n          inputProps={{\n            ...params.inputProps,\n            autoComplete: 'new-password', // disable autocomplete and autofill\n          }}\n        />\n      )}\n    />\n  )\n};\n\nexport default CurrencySelector","import React from 'react'\n\nimport Chip from '@mui/material/Chip'\nimport Stack, { StackProps } from '@mui/material/Stack'\nimport { grey } from '@mui/material/colors';\n\nimport { Currency } from '../../types';\n\n\nexport interface LatestCurrenciesProps extends StackProps {\n    list: Array<Currency>;\n    selected: Currency | null;\n    onSelectCurrency: (currency: Currency) => void;\n}\n\n\nconst LatestCurrencies: React.FC<LatestCurrenciesProps> = ({ list, selected, onSelectCurrency, ...props }) => (\n    <Stack direction=\"row\" spacing={1} {...props}>\n        {list.map(currency => {\n            const isSelected = selected !== null && currency.code === selected.code\n            return (\n                <Chip \n                    sx={{\n                        backgroundColor: (theme) => isSelected ? theme.palette.primary.light : grey[100],\n                        border: theme => `1px solid ${isSelected ? theme.palette.primary.dark : grey[600]}`,\n                        '&:hover': {\n                            backgroundColor: (theme) => isSelected ? theme.palette.primary.light : grey[300]\n                        }\n                    }}\n                    color={isSelected ? 'primary' : 'default'}\n                    label={currency.code.toUpperCase()} \n                    onClick={() => onSelectCurrency(currency)}\n                    clickable \n                    key={currency.code} \n                />\n            )\n        })}\n    </Stack>\n)\n\nexport default LatestCurrencies","import React from 'react'\nimport TextField, { TextFieldProps } from '@mui/material/TextField'\n\nconst CurrencyInput: React.FC<TextFieldProps> = (props) => (\n    <TextField sx={{ width: 300 }} type=\"number\" InputLabelProps={{ shrink: true }} {...props} />\n)\n\nexport default CurrencyInput\n","import React from 'react';\n\nimport Container from '@mui/material/Container'\nimport Box from '@mui/material/Box'\nimport Paper from '@mui/material/Paper'\nimport Grid from '@mui/material/Grid'\nimport ImportExportIcon from '@mui/icons-material/ImportExport';\n\nimport { getExchangeRateFor, getLatestCurrenciesList } from './utils';\nimport CurrencySelector from './components/CurrencySelector';\nimport LatestCurrencies from './components/LatestCurrencies'\nimport CurrencyInput from './components/CurrencyInput';\nimport type { Currency, ExchangeRate } from './types'\n\nconst MAX_LATEST_HISTORY_SIZE = 5\n\nconst addCurrencyToList = (newCurrency: Currency, currentList: Array<Currency>) => {\n  if (!currentList.find((c) => c.code === newCurrency.code)) {\n    return [newCurrency].concat(currentList.slice(0, MAX_LATEST_HISTORY_SIZE - 1))\n  }\n  return currentList\n}\n\ntype CurrencyInputVal = string | number\n\ntype ExchangeProps = {\n  input: CurrencyInputVal;\n  updateInput: React.Dispatch<React.SetStateAction<CurrencyInputVal>>;\n  updateOutput: React.Dispatch<React.SetStateAction<CurrencyInputVal>>;\n  inputCurrency: Currency | null;\n  outputCurrency: Currency | null;\n  exchangeRate: ExchangeRate | undefined;\n}\nconst updateExchange = ({\n  input,\n  updateInput,\n  updateOutput,\n  inputCurrency,\n  outputCurrency,\n  exchangeRate,\n}: ExchangeProps) => {\n  updateInput(() => input)\n\n  if (inputCurrency != null && outputCurrency != null && exchangeRate != null) {\n    const amount = +input\n    const output = exchangeRate.currency === inputCurrency.code \n      ? amount * exchangeRate.rate[outputCurrency.code]\n      : amount / exchangeRate.rate[inputCurrency.code]\n\n    updateOutput(() => output.toFixed(2))\n  }\n}\n\nfunction App() {\n  const [currencies, setCurrencies] = React.useState<Array<Currency>>([])\n\n  const [selectedCurrencyTop, setSelectedCurrencyTop] = React.useState<Currency | null>(null)\n  const [selectedCurrencyBottom, setSelectedCurrencyBottom] = React.useState<Currency | null>(null)\n\n  const [latestCurrenciesTop, setLatestCurrenciesTop] = React.useState<Array<Currency>>([])\n  const [latestCurrenciesBottom, setLatestCurrenciesBottom] = React.useState<Array<Currency>>([])\n\n  const [amountTop, setAmountTop] = React.useState<CurrencyInputVal>('')\n  const [amountBottom, setAmountBottom] = React.useState<CurrencyInputVal>('')\n\n  const [exchangeRate, setExchangeRate] = React.useState<ExchangeRate>();\n\n  React.useEffect(() => {\n    getLatestCurrenciesList().then(setCurrencies).catch(console.log)\n\n    const latestTop = localStorage.getItem('latest-currencies-top')\n    const latestBottom = localStorage.getItem('latest-currencies-bottom')\n    if (latestTop != null) {\n      setLatestCurrenciesTop(JSON.parse(latestTop))\n    }\n    if (latestBottom != null) {\n      setLatestCurrenciesBottom(JSON.parse(latestBottom))\n    }\n  }, [])\n\n\n  const onChangeAmountTop = React.useCallback((source, rest: Partial<ExchangeProps> = {}) => updateExchange({\n    input: typeof source === 'object' ? source.target.value : source,\n    inputCurrency: selectedCurrencyTop,\n    outputCurrency: selectedCurrencyBottom,\n    updateInput: setAmountTop,\n    updateOutput: setAmountBottom,\n    exchangeRate,\n    ...rest\n  }), [selectedCurrencyTop, selectedCurrencyBottom, exchangeRate])\n  const onChangeAmountBottom = React.useCallback((source, rest: Partial<ExchangeProps> = {}) => updateExchange({\n    input: typeof source === 'object' ? source.target.value : source,\n    inputCurrency: selectedCurrencyBottom,\n    outputCurrency: selectedCurrencyTop,\n    updateInput: setAmountBottom,\n    updateOutput: setAmountTop,\n    exchangeRate,\n    ...rest\n  }), [selectedCurrencyTop, selectedCurrencyBottom, exchangeRate])\n\n  const onSelectCurrencyTop = React.useCallback((currency: Currency) => {\n    if (selectedCurrencyTop?.code === currency.code) return\n\n    setSelectedCurrencyTop(currency)\n    setLatestCurrenciesTop((list) => {\n      const newCurrencyList = addCurrencyToList(currency, list)\n      localStorage.setItem('latest-currencies-top', JSON.stringify(newCurrencyList))\n      return newCurrencyList\n    })\n\n    getExchangeRateFor(currency.code).then(\n      (rate) => {\n        setExchangeRate(rate)\n        onChangeAmountTop(amountTop, { inputCurrency: currency, exchangeRate: rate })\n      }\n    )\n  }, [amountTop, selectedCurrencyTop, onChangeAmountTop])\n  const onSelectCurrencyBottom = React.useCallback((currency: Currency) => {\n    if (selectedCurrencyBottom?.code === currency.code) return\n\n    setSelectedCurrencyBottom(currency)\n    setLatestCurrenciesBottom((list) => {\n      const newCurrencyList = addCurrencyToList(currency, list)\n      localStorage.setItem('latest-currencies-bottom', JSON.stringify(newCurrencyList))\n      return newCurrencyList\n    })\n\n    onChangeAmountTop(amountTop, { outputCurrency: currency })\n  }, [amountTop, onChangeAmountTop, selectedCurrencyBottom])\n\n\n  return (\n    <Container sx={{ height: '100vh' }}>\n      <Box sx={{ height: '100%', display: 'flex', alignItems: 'center' }}>\n        <Paper sx={{ width: '100%', padding: 2 }}>\n          <Grid container direction=\"column\" spacing={2} alignContent=\"center\" sx={{ position: 'relative', paddingTop: '40px' }}>\n            <Grid item>\n              <LatestCurrencies sx={{ position: 'absolute', top: 10 }} selected={selectedCurrencyTop} list={latestCurrenciesTop} onSelectCurrency={onSelectCurrencyTop} />\n              <CurrencySelector value={selectedCurrencyTop} onSelect={onSelectCurrencyTop} label=\"Select currency\" currencies={currencies} />\n            </Grid>\n            <Grid item>\n              <CurrencyInput value={amountTop} onChange={onChangeAmountTop} label=\"Amount\" disabled={selectedCurrencyTop == null} />\n            </Grid>\n          </Grid>\n\n          <Box sx={{ padding: 2, display: 'flex', justifyContent: 'center' }}>\n            <ImportExportIcon color=\"action\" fontSize=\"large\" />\n          </Box>\n\n          <Grid container direction=\"column\" spacing={2} alignContent=\"center\" sx={{ position: 'relative', paddingBottom: '40px' }}>\n            <Grid item>\n              <CurrencyInput value={amountBottom} onChange={onChangeAmountBottom} label=\"Amount\" disabled={selectedCurrencyBottom == null} />\n            </Grid>\n            <Grid item>\n              <CurrencySelector value={selectedCurrencyBottom} onSelect={onSelectCurrencyBottom} label=\"Select currency\" currencies={currencies} />\n              <LatestCurrencies sx={{ position: 'absolute', bottom: 0 }} selected={selectedCurrencyBottom} list={latestCurrenciesBottom} onSelectCurrency={onSelectCurrencyBottom} />\n            </Grid>\n          </Grid>\n        </Paper>\n      </Box>\n    </Container>\n  );\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#63d3d3'\n    }\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}