{"version":3,"sources":["utils.ts","components/CurrencySelector/index.tsx","components/LatestCurrencies/index.tsx","components/CurrencyInput/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["callApi","endpoint","date","fetch","then","data","json","filterOptions","createFilterOptions","ignoreCase","stringify","option","code","label","CurrencySelector","currencies","onSelect","value","Autocomplete","onChange","_","sx","width","options","autoHighlight","getOptionLabel","toUpperCase","renderOption","props","Box","component","mr","flexShrink","renderInput","params","TextField","inputProps","autoComplete","LatestCurrencies","list","selected","onSelectCurrency","Stack","direction","spacing","map","currency","isSelected","Chip","backgroundColor","theme","alpha","palette","primary","light","grey","border","dark","color","onClick","clickable","CurrencyInput","type","InputLabelProps","shrink","updateExchange","input","updateInput","updateOutput","inputCurrency","outputCurrency","exchangeRate","amount","output","rate","toFixed","selectCurrencyHandler","updateCurrencyList","setExchangeRate","performExchangeOnField","localStorageKey","newCurrency","newCurrencyList","currentList","find","c","concat","slice","MAX_LATEST_HISTORY_SIZE","localStorage","setItem","JSON","getExchangeRateFor","App","React","useState","setCurrencies","selectedCurrencyTop","setSelectedCurrencyTop","selectedCurrencyBottom","setSelectedCurrencyBottom","latestCurrenciesTop","setLatestCurrenciesTop","latestCurrenciesBottom","setLatestCurrenciesBottom","amountTop","setAmountTop","amountBottom","setAmountBottom","useEffect","Object","entries","console","log","latestTop","getItem","latestBottom","parse","onChangeAmountTop","useCallback","source","rest","target","onChangeAmountBottom","onSelectCurrencyTop","onSelectCurrencyBottom","Container","height","display","alignItems","Paper","padding","Grid","container","alignContent","position","paddingTop","item","top","disabled","justifyContent","fontSize","paddingBottom","bottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","main","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b4c2f90e.chunk.js","sourcesContent":["import { Currency, ExchangeRate } from \"./types\"\n\nexport const callApi: <R = Record<string, string>>(endpoint: string, date?: string) => Promise<R> = (endpoint, date = 'latest') => (\n    fetch(`https://cdn.jsdelivr.net/gh/fawazahmed0/currency-api@1/${date}/${endpoint}`)\n        .then(data => data.json())\n)\n\nexport const getLatestCurrenciesList: () => Promise<Array<Currency>> = () => callApi('currencies.json').then((currencies) => (\n    Object.entries(currencies).map(([code, label]) => ({ code, label }))\n))\n\nexport const getExchangeRateFor = (currency: string): Promise<ExchangeRate> => (\n    callApi<{ date: string } & { [currency: string]: Record<string, number> }>(`currencies/${currency}.json`)\n        .then(exchangeRate => ({\n            date: exchangeRate.date,\n            currency,\n            rate: exchangeRate[currency],\n        }))\n)\n\nexport const toAmount = (value: string | null) => value == null ? '' : parseInt(value, 10)\n","import * as React from 'react'\n\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete'\nimport TextField from '@mui/material/TextField'\nimport Box from '@mui/material/Box'\n\nimport type { Currency } from '../../types'\n\ninterface CurrencySelectorProps {\n  currencies: Array<Currency>;\n  label: string;\n  onSelect: (currency: Currency) => void;\n  value: Currency | null;\n}\n\nconst filterOptions = createFilterOptions({\n  ignoreCase: true,\n  stringify: (option: Currency) => option.code + option.label,\n})\n\nconst CurrencySelector: React.FC<CurrencySelectorProps> = ({ currencies, label, onSelect, value }) => {\n  return (\n    <Autocomplete\n      onChange={(_, value) => value && onSelect(value)}\n      filterOptions={filterOptions}\n      sx={{ width: 300 }}\n      options={currencies}\n      value={value}\n      autoHighlight\n      getOptionLabel={({ code }) => code.toUpperCase()}\n      renderOption={(props, option) => (\n        <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n          {/* <img\n            loading=\"lazy\"\n            width=\"20\"\n            src={`https://flagcdn.com/w20/${option.countryCode}.png`}\n            srcSet={`https://flagcdn.com/w40/${option.countryCode}.png 2x`}\n            alt=\"\"\n          /> */}\n          ({option.code.toUpperCase()}) {option.label}\n        </Box>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label={label}\n          inputProps={{\n            ...params.inputProps,\n            autoComplete: 'new-password', // disable autocomplete and autofill\n          }}\n        />\n      )}\n    />\n  )\n};\n\nexport default CurrencySelector","import React from 'react'\n\nimport Chip from '@mui/material/Chip'\nimport Stack, { StackProps } from '@mui/material/Stack'\nimport { grey } from '@mui/material/colors';\nimport { alpha } from '@mui/system/colorManipulator'\n\nimport { Currency } from '../../types';\n\n\nexport interface LatestCurrenciesProps extends StackProps {\n    list: Array<Currency>;\n    selected: Currency | null;\n    onSelectCurrency: (currency: Currency) => void;\n}\n\n\nconst LatestCurrencies: React.FC<LatestCurrenciesProps> = ({ list, selected, onSelectCurrency, ...props }) => (\n    <Stack direction=\"row\" spacing={1} {...props}>\n        {list.map(currency => {\n            const isSelected = selected !== null && currency.code === selected.code\n            return (\n                <Chip \n                    sx={{\n                        backgroundColor: (theme) => isSelected ? alpha(theme.palette.primary.light, 0.4) : grey[100],\n                        border: theme => `1px solid ${isSelected ? theme.palette.primary.dark : grey[600]}`,\n                        '&:hover': {\n                            backgroundColor: (theme) => isSelected ? alpha(theme.palette.primary.light, 0.6) : grey[300]\n                        }\n                    }}\n                    color={isSelected ? 'primary' : 'default'}\n                    label={currency.code.toUpperCase()} \n                    onClick={() => onSelectCurrency(currency)}\n                    clickable \n                    key={currency.code} \n                />\n            )\n        })}\n    </Stack>\n)\n\nexport default LatestCurrencies","import React from 'react'\nimport TextField, { TextFieldProps } from '@mui/material/TextField'\n\nconst CurrencyInput: React.FC<TextFieldProps> = (props) => (\n    <TextField sx={{ width: 300 }} type=\"number\" InputLabelProps={{ shrink: true }} {...props} />\n)\n\nexport default CurrencyInput\n","import React from 'react';\n\nimport Container from '@mui/material/Container'\nimport Box from '@mui/material/Box'\nimport Paper from '@mui/material/Paper'\nimport Grid from '@mui/material/Grid'\nimport ImportExportIcon from '@mui/icons-material/ImportExport';\n\nimport { getExchangeRateFor, getLatestCurrenciesList } from './utils';\nimport CurrencySelector from './components/CurrencySelector';\nimport LatestCurrencies from './components/LatestCurrencies'\nimport CurrencyInput from './components/CurrencyInput';\nimport type { Currency, ExchangeRate } from './types'\n\nconst MAX_LATEST_HISTORY_SIZE = 5\n\nconst addCurrencyToList = (newCurrency: Currency) => (currentList: Array<Currency>) => {\n  if (!currentList.find((c) => c.code === newCurrency.code)) {\n    return [newCurrency].concat(currentList.slice(0, MAX_LATEST_HISTORY_SIZE - 1))\n  }\n  return currentList\n}\n\ntype CurrencyInputVal = string | number\n\ntype ExchangeProps = {\n  input: CurrencyInputVal;\n  updateInput: React.Dispatch<React.SetStateAction<CurrencyInputVal>>;\n  updateOutput: React.Dispatch<React.SetStateAction<CurrencyInputVal>>;\n  inputCurrency: Currency | null;\n  outputCurrency: Currency | null;\n  exchangeRate: ExchangeRate | undefined;\n}\nconst updateExchange = ({\n  input,\n  updateInput,\n  updateOutput,\n  inputCurrency,\n  outputCurrency,\n  exchangeRate,\n}: ExchangeProps) => {\n  updateInput(() => input)\n\n  if (inputCurrency != null && outputCurrency != null && exchangeRate != null) {\n    const amount = +input\n    const output = exchangeRate.currency === inputCurrency.code \n      ? amount * exchangeRate.rate[outputCurrency.code]\n      : amount / exchangeRate.rate[inputCurrency.code]\n    updateOutput(() => output.toFixed(2))\n  }\n}\n\ntype SelectCurrencyHandlerProps = {\n  amount: CurrencyInputVal;\n  currency: Currency;\n  updateInput: React.Dispatch<React.SetStateAction<Currency | null>>;\n  updateCurrencyList: React.Dispatch<React.SetStateAction<Array<Currency>>>;\n  setExchangeRate: React.Dispatch<React.SetStateAction<ExchangeRate | undefined>>;\n  performExchangeOnField: (source: any, rest?: Partial<ExchangeProps>) => void;\n  localStorageKey: string;\n}\nconst selectCurrencyHandler = ({\n  amount,\n  currency,\n  updateInput,\n  updateCurrencyList,\n  setExchangeRate,\n  performExchangeOnField,\n  localStorageKey,\n}: SelectCurrencyHandlerProps) => {\n  updateInput(currency)\n  updateCurrencyList((list) => {\n    const newCurrencyList = addCurrencyToList(currency)(list)\n    localStorage.setItem(localStorageKey, JSON.stringify(newCurrencyList))\n    return newCurrencyList\n  })\n\n  getExchangeRateFor(currency.code).then(\n    (rate) => {\n      setExchangeRate(rate)\n      performExchangeOnField(amount, { exchangeRate: rate })\n    }\n  )\n}\n\nfunction App() {\n  const [currencies, setCurrencies] = React.useState<Array<Currency>>([])\n\n  const [selectedCurrencyTop, setSelectedCurrencyTop] = React.useState<Currency | null>(null)\n  const [selectedCurrencyBottom, setSelectedCurrencyBottom] = React.useState<Currency | null>(null)\n\n  const [latestCurrenciesTop, setLatestCurrenciesTop] = React.useState<Array<Currency>>([])\n  const [latestCurrenciesBottom, setLatestCurrenciesBottom] = React.useState<Array<Currency>>([])\n\n  const [amountTop, setAmountTop] = React.useState<CurrencyInputVal>('')\n  const [amountBottom, setAmountBottom] = React.useState<CurrencyInputVal>('')\n\n  const [exchangeRate, setExchangeRate] = React.useState<ExchangeRate>();\n\n  React.useEffect(() => {\n    getLatestCurrenciesList().then(setCurrencies).catch(console.log)\n\n    const latestTop = localStorage.getItem('latest-currencies-top')\n    const latestBottom = localStorage.getItem('latest-currencies-bottom')\n    if (latestTop != null) {\n      setLatestCurrenciesTop(JSON.parse(latestTop))\n    }\n    if (latestBottom != null) {\n      setLatestCurrenciesBottom(JSON.parse(latestBottom))\n    }\n  }, [])\n\n\n  const onChangeAmountTop = React.useCallback((source, rest: Partial<ExchangeProps> = {}) => updateExchange({\n    input: typeof source === 'object' ? source.target.value : source,\n    inputCurrency: selectedCurrencyTop,\n    outputCurrency: selectedCurrencyBottom,\n    updateInput: setAmountTop,\n    updateOutput: setAmountBottom,\n    exchangeRate,\n    ...rest\n  }), [selectedCurrencyTop, selectedCurrencyBottom, exchangeRate])\n  const onChangeAmountBottom = React.useCallback((source, rest: Partial<ExchangeProps> = {}) => updateExchange({\n    input: typeof source === 'object' ? source.target.value : source,\n    inputCurrency: selectedCurrencyBottom,\n    outputCurrency: selectedCurrencyTop,\n    updateInput: setAmountBottom,\n    updateOutput: setAmountTop,\n    exchangeRate,\n    ...rest\n  }), [selectedCurrencyTop, selectedCurrencyBottom, exchangeRate])\n\n  const onSelectCurrencyTop = React.useCallback((currency: Currency) => selectCurrencyHandler({\n    amount: amountTop,\n    currency,\n    updateInput: setSelectedCurrencyTop,\n    updateCurrencyList: setLatestCurrenciesTop,\n    setExchangeRate,\n    performExchangeOnField: onChangeAmountTop,\n    localStorageKey: 'latest-currencies-top',\n  }), [amountTop])\n  const onSelectCurrencyBottom = React.useCallback((currency: Currency) => selectCurrencyHandler({\n    amount: amountTop,\n    currency,\n    updateInput: setSelectedCurrencyBottom,\n    updateCurrencyList: setLatestCurrenciesBottom,\n    setExchangeRate,\n    performExchangeOnField: onChangeAmountTop,\n    localStorageKey: 'latest-currencies-bottom',\n  }), [amountBottom])\n\n\n  return (\n    <Container sx={{ height: '100vh' }}>\n      <Box sx={{ height: '100%', display: 'flex', alignItems: 'center' }}>\n        <Paper sx={{ width: '100%', padding: 2 }}>\n          <Grid container direction=\"column\" spacing={2} alignContent=\"center\" sx={{ position: 'relative', paddingTop: '40px' }}>\n            <Grid item>\n              <LatestCurrencies sx={{ position: 'absolute', top: 10 }} selected={selectedCurrencyTop} list={latestCurrenciesTop} onSelectCurrency={onSelectCurrencyTop} />\n              <CurrencySelector value={selectedCurrencyTop} onSelect={onSelectCurrencyTop} label=\"Select currency\" currencies={currencies} />\n            </Grid>\n            <Grid item>\n              <CurrencyInput value={amountTop} onChange={onChangeAmountTop} label=\"Amount\" disabled={selectedCurrencyTop == null} />\n            </Grid>\n          </Grid>\n\n          <Box sx={{ padding: 2, display: 'flex', justifyContent: 'center' }}>\n            <ImportExportIcon color=\"action\" fontSize=\"large\" />\n          </Box>\n\n          <Grid container direction=\"column\" spacing={2} alignContent=\"center\" sx={{ position: 'relative', paddingBottom: '40px' }}>\n            <Grid item>\n              <CurrencyInput value={amountBottom} onChange={onChangeAmountBottom} label=\"Amount\" disabled={selectedCurrencyBottom == null} />\n            </Grid>\n            <Grid item>\n              <CurrencySelector value={selectedCurrencyBottom} onSelect={onSelectCurrencyBottom} label=\"Select currency\" currencies={currencies} />\n              <LatestCurrencies sx={{ position: 'absolute', bottom: 0 }} selected={selectedCurrencyBottom} list={latestCurrenciesBottom} onSelectCurrency={onSelectCurrencyBottom} />\n            </Grid>\n          </Grid>\n        </Paper>\n      </Box>\n    </Container>\n  );\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#63d3d3'\n    }\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}